{"version":3,"sources":["../../../packages/core/src/index.js","../../../packages/core/src/operators.js","../../../packages/core/src/parser.js","../../../packages/core/src/calculator.js","AppExpression.js","AppHeader.js","AppOutput.js","App.js","serviceWorker.js","index.js"],"names":["Parser","__webpack_require__","Calculator","exports","calculate","expression","parser","parse","_classCallCheck","_createClass","BigNumber","Operator","precedence","symbol","action","this","key","value","first","second","POWER","pow","MULTIPLY","times","DIVIDE","div","MODULO","mod","ADD","plus","SUBTRACT","minus","module","OPERATORS","OPERATOR_SYMBOLS","map","_ref","_stack","_postfix","token","operator","find","item","push","pop","includes","length","_precedence","tokens","replace","trim","split","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","_processToken","err","return","config","EXPONENTIAL_AT","_tokens","_operands","secondOperand","firstOperand","isNaN","Error","concat","toString","AppExpression","_Component","_getPrototypeOf2","_this","Object","classCallCheck","_len","arguments","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","state","inherits","createClass","event","setState","target","keyCode","props","onCalculate","_this2","react_default","a","createElement","className","placeholder","onChange","onValueChange","bind","onKeyDown","onClick","Component","AppHeader","AppOutput","result","_ref$postfixTokens","postfixTokens","join","App","error","console","log","_this$state","href","AppHeader_AppHeader","AppExpression_AppExpression","AppOutput_AppOutput","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.13e2f98a.chunk.js","sourcesContent":["'use strict';\n\nvar Parser = require('./parser');\n\nvar Calculator = require('./calculator');\n/**\n * Calculates math string expression\n * @param {string} expression \n * @returns {string} result of the expression\n */\n\n\nexports.calculate = function calculate(expression) {\n  var parser = new Parser(expression);\n  var calculator = new Calculator(parser.parse());\n  return calculator.calculate();\n};\n\nexports.Calculator = Calculator;\nexports.Parser = Parser;","var _classCallCheck = require(\"/home/erzhtor/Desktop/sandbox/algebra-monorepo/apps/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/erzhtor/Desktop/sandbox/algebra-monorepo/apps/frontend/node_modules/@babel/runtime/helpers/createClass\");\n\nvar BigNumber = require('bignumber.js');\n\nvar Operator =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function Operator(precedence, symbol, action) {\n    _classCallCheck(this, Operator);\n\n    this.precedence = precedence;\n    this.symbol = symbol;\n    this.action = action;\n  }\n\n  _createClass(Operator, [{\n    key: \"calculate\",\n    value: function calculate(first, second) {\n      return this.action(first, second);\n    }\n  }]);\n\n  return Operator;\n}();\n\nvar POWER = new Operator(4, '^', function (first, second) {\n  return new BigNumber(first).pow(new BigNumber(second));\n});\nvar MULTIPLY = new Operator(3, '*', function (first, second) {\n  return new BigNumber(first).times(new BigNumber(second));\n});\nvar DIVIDE = new Operator(3, '/', function (first, second) {\n  return new BigNumber(first).div(new BigNumber(second));\n});\nvar MODULO = new Operator(3, '%', function (first, second) {\n  return new BigNumber(first).mod(new BigNumber(second));\n});\nvar ADD = new Operator(2, '+', function (first, second) {\n  return new BigNumber(first).plus(new BigNumber(second));\n});\nvar SUBTRACT = new Operator(2, '-', function (first, second) {\n  return new BigNumber(first).minus(new BigNumber(second));\n});\nmodule.exports = [POWER, MULTIPLY, DIVIDE, MODULO, ADD, SUBTRACT];","'use strict';\n\nvar _classCallCheck = require(\"/home/erzhtor/Desktop/sandbox/algebra-monorepo/apps/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/erzhtor/Desktop/sandbox/algebra-monorepo/apps/frontend/node_modules/@babel/runtime/helpers/createClass\");\n\nvar OPERATORS = require('./operators');\n\nvar BRACE_END = ')';\nvar BRACE_START = '(';\nvar OPERATOR_SYMBOLS = OPERATORS.map(function (_ref) {\n  var symbol = _ref.symbol;\n  return symbol;\n});\n/**\n * Parses infix notation expression into postfix notation\n */\n\nmodule.exports =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param {string} expression infix notation string\n   */\n  function Parser(expression) {\n    _classCallCheck(this, Parser);\n\n    this.expression = expression;\n    this._stack = []; // stack for operators, braceEnd, braceStart\n\n    this._postfix = []; // postfix tokens result array\n  }\n\n  _createClass(Parser, [{\n    key: \"_precedence\",\n    value: function _precedence(token) {\n      var operator = OPERATORS.find(function (item) {\n        return item.symbol === token;\n      });\n      return operator ? operator.precedence : 0;\n    }\n  }, {\n    key: \"_processToken\",\n    value: function _processToken(token) {\n      if (token === BRACE_START) {\n        // handle '('\n        this._stack.push(token);\n      } else if (token === BRACE_END) {\n        // handle ')'\n        var operator = this._stack.pop();\n\n        while (operator !== BRACE_START) {\n          this._postfix.push(operator);\n\n          operator = this._stack.pop();\n        }\n      } else if (OPERATOR_SYMBOLS.includes(token)) {\n        // handle operators\n        while (this._stack.length > 0 && this._precedence(token) <= this._precedence(this._stack[this._stack.length - 1])) {\n          this._postfix.push(this._stack.pop());\n        }\n\n        this._stack.push(token);\n      } else {\n        this._postfix.push(token);\n      }\n    }\n  }, {\n    key: \"parse\",\n    value: function parse() {\n      var tokens = this.expression.replace(/\\s*([*/\\-+()%^])\\s*/g, ' $& ') // add spaces between operators\n      .trim().split(/\\s+/);\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = tokens[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var token = _step.value;\n\n          this._processToken(token);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      while (this._stack.length > 0) {\n        this._postfix.push(this._stack.pop());\n      }\n\n      return this._postfix;\n    }\n  }]);\n\n  return Parser;\n}();","'use strict';\n\nvar _classCallCheck = require(\"/home/erzhtor/Desktop/sandbox/algebra-monorepo/apps/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/erzhtor/Desktop/sandbox/algebra-monorepo/apps/frontend/node_modules/@babel/runtime/helpers/createClass\");\n\nvar BigNumber = require('bignumber.js');\n\nvar OPERATORS = require('./operators');\n\nBigNumber.config({\n  EXPONENTIAL_AT: 1000\n});\n/**\n * Calculates postfix notation expression\n */\n\nmodule.exports =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param {string[]} tokens postfix notation tokens\n   */\n  function Calculator(tokens) {\n    _classCallCheck(this, Calculator);\n\n    this._tokens = tokens;\n    this._operands = [];\n  }\n\n  _createClass(Calculator, [{\n    key: \"_processToken\",\n    value: function _processToken(token) {\n      var operator = OPERATORS.find(function (item) {\n        return item.symbol === token;\n      });\n\n      if (operator) {\n        var secondOperand = this._operands.pop();\n\n        var firstOperand = this._operands.pop();\n\n        this._operands.push(operator.calculate(firstOperand, secondOperand));\n\n        return;\n      }\n\n      var value = new BigNumber(token);\n\n      if (!value.isNaN()) {\n        this._operands.push(value);\n      } else {\n        throw new Error(\"Unknown token: \".concat(token));\n      }\n    }\n  }, {\n    key: \"calculate\",\n    value: function calculate() {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this._tokens[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var token = _step.value;\n\n          this._processToken(token);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      if (this._operands.length !== 1) {\n        throw Error('Incorrect expression');\n      }\n\n      return this._operands.pop().toString();\n    }\n  }]);\n\n  return Calculator;\n}();","import React, { Component } from \"react\";\n\nexport class AppExpression extends Component {\n    state = {};\n\n    onValueChange(event) {\n        this.setState({ value: event.target.value });\n    }\n\n    onKeyDown(event) {\n        if (event.keyCode === 13) {\n            this.props.onCalculate(this.state.value);\n        }\n    }\n\n    render() {\n        return (\n            <section className=\"expression\">\n                <input\n                    value={this.state.value}\n                    className=\"expression__input\"\n                    placeholder=\"Enter what you want to calculate. Ex: 111 + 22 * (-4 / 2) ^ 3\"\n                    onChange={this.onValueChange.bind(this)}\n                    onKeyDown={this.onKeyDown.bind(this)}\n                />\n                <button\n                    className=\"expression__btn\"\n                    onClick={() => this.props.onCalculate(this.state.value)}\n                >\n                    calculate\n                </button>\n            </section>\n        );\n    }\n}","import React from \"react\";\n\nexport const AppHeader = () => (\n    <header className=\"header\">\n        <div className=\"header__left\">\n            <h1 className=\"header__title\">Algebroid</h1>\n            <span className=\"header__info\">\n                open source expression calculator\n            </span>\n        </div>\n        <div className=\"header__right\">\n            <span>Supports large numbers.</span>\n            <br />\n            <span>Supported operators: + - / * % ^</span>\n        </div>\n    </header>\n);","import React from \"react\";\n\nexport const AppOutput = ({ result, expression, postfixTokens=[] }) => (\n    <section className=\"result\">\n        <div className=\"result__item\">\n            <span>Expression</span>\n            <code>{expression}</code>\n        </div>\n        <div className=\"result__item\">\n            <span>Result</span>\n            <code>{result}</code>\n        </div>\n        <div className=\"result__item\">\n            <span>Postfix notation</span>\n            <code>{postfixTokens.join(' ')}</code>\n        </div>\n    </section>\n);","import React, { Component } from \"react\";\nimport { Calculator, Parser } from \"@algebroid/core\";\n\nimport {AppExpression} from \"./AppExpression\";\nimport {AppHeader} from \"./AppHeader\";\nimport {AppOutput} from \"./AppOutput\";\n\nclass App extends Component {\n    state = {};\n\n    onCalculate(expression) {\n        try {\n            const postfixTokens = new Parser(expression).parse();\n            const result = new Calculator(postfixTokens).calculate();\n            this.setState({\n                postfixTokens,\n                result,\n                expression,\n                error: null\n            });\n        } catch (error) {\n            console.log(error);\n            this.setState({\n                error\n            });\n        }\n    }\n\n    render() {\n        const { expression, result, postfixTokens, error } = this.state;\n        return (\n            <div className=\"App\">\n                <a href=\"https://github.com/erzhtor/algebroid\" className=\"github-link\">\n                    Github\n                </a>\n                <AppHeader />\n                <AppExpression onCalculate={this.onCalculate.bind(this)} />\n                {error && <p className=\"error\">Error occured: {error.toString()}</p>}\n                <AppOutput\n                    expression={expression}\n                    result={result}\n                    postfixTokens={postfixTokens}\n                />\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}